= Webサーバについて学ぶ

//lead{
この章ではAndroidアプリと通信するWebサーバについて学びます。
これまでは事前に容易されたデータをAndroidアプリから取得するだけでしたが、
本章ではそのデータを提供する側を実装します。
//}

== この節で学ぶこと

 * Webサーバとは？
 * サーバはなぜ重要？

この節で出てくるキーワード

 * Webサーバ
 * DNS
 * HTTP

すでにWebサーバにアクセスするプログラムは何度も登場してきました。
しかしその時でも、一般に公開されている商用のWebサーバや、
予め講師が準備したWebサーバへアクセスし、欲しいデータを取得するだけでした。

本章では反対側の「Webサーバ」を自分で用意・実装し、それを通じて
AndroidアプリがWebサーバと通信する際にサーバ側で何が起きているかを学習します。

本章では、特に第13章「ネットワークプログラミング」で学んだ概念を前提とします。
理解に不安がある際には復習してから以降を読み進めてください。

== Webサーバとは？

Webブラウザを用いてWebページを閲覧するのが当たり前の時代ですから、
Webという言葉についてはイメージが付くでしょう。

サーバ(Server)という単語は、
「ジュースサーバ」といった表現で日常会話でも登場します。
IT分野以外では、「給仕する人、接客係」といった意味で使われる単語です。

//image[juiceserver][ジュースサーバ。画像の版権確認なし。要確認]{
//}

堅苦しく言えば、サーバは「資源を要求する側に、その資源を提供」します。
「資源を要求する側」はながったらしーので、「クライアント」と呼びます。
ジュースサーバの場合、クライアントが要求する「資源」はジュースでした。

資源を補充されることもあります。
ジュースサーバでは、ジュースがなくなったら、誰かが継ぎ足します。

Webサーバの場合にも、資源を求めてAndroidアプリがアクセスします。
あるいは資源を補充するためにもアプリがアクセスします。

Webサーバは、実際にはAndroidアプリ以外とも通信します。
冒頭のWebページのことを思い出してください。
Webページを受け取るPCでは、AndroidアプリではなくWebブラウザが
起動しているかもしれません。

Webサーバは、準備があれば、等しく「資源」をやり取りします。
本章では後半でこれを意識したサーバ実装を行います。

== Google App Engine

本節では、Webサーバの環境として、
Google App Engine(略してApp Engine、もしくはGAE)の
Python言語による実装を用います。
GAEにはJavaによる実装もありますが、
Webサーバ入門としては準備に時間を費やしてしまうため、見送ります。

PythonはJavaやC言語のようなプログラミング言語の一つです。
サーバ側の実装やプログラミング教育で豊富な実績があります。
@<fn>{python_for_education_in_gigazine}

//footnote[python_for_education_in_gigazine][「Pythonが大学の入門用プログラミング言語として人気を集めていると判明」 by Gigazine 2014年7月15日 @<href>{http://gigazine.net/news/20140715-python-most-popular-language/}]

=== 参考: Webサーバの選択肢

この点は強調させてください。
Webサーバを準備する方法は無数の選択肢があり、混沌としています。
本章では特に準備の用意さと学習内容との整合性から
GAEのPython実装を採用しましたが、
仮に読者がサーバ環境を自力で作成する場合に、
これが最適な解になるとは限りません。

Androidアプリからすれば、Webサーバの話は結局のところ、
「どうアクセスすれば自分が望む資源にアクセスできるか」
だけに注力すれば問題ありませんが、
Webサーバ側も自分で用意するとなった場合には、
採用する技術の違いには十分注意する必要があります。

GAEはIT用語では「PaaS」(Platform as a Service)の1つを採用したことになります。
これ以外にも、SaaS(Software as a Service)やIaaS(Infrastructure as a Service)
といった異なるレベルの実装方法があります。
訳がわからないネーミングですが、きちっと総務省のお墨付きです。

例えば本章筆者が個人的に開発しているWebサービス「Griflet」は、
その性質上SaaSやPaaS環境では実現できない要素を含むため、
IaaS的性質を持つ環境しか選択肢に上がりません。

==[column] Androidアプリはサーバになれないの？

なれます。

例えば、単純なファイル共有ソフトを作り、
教室内でファイルをやりとりするくらいなら、
比較的簡単に達成できるでしょう。

一方、「世界に公開する」Webサーバにするには障害がいくつもあります。

Android端末が利用しているインターネット接続が、
例えば講義室のWi-Fiによるものなら、
おそらく世界への公開は難しいでしょう。
その講義室のネットワークを管理する担当者が、
みなさんの端末が世界に公開されて攻撃されることから
守るために色々な防御の仕組みを準備しているはずです。

本章では詳細に触れることはできませんが、
頻繁に課題となる技術要素を列挙しますので、
興味があればインターネットで調べてみてください。

 * NATによりAndroid端末のIPアドレスとTCPポートを外部から参照できない
 * ISPや組織のファイアウォールによりパケットの往復が意図的にブロックされる
 * OS自体のセキュリティ機構によりポートへのアクセスが制限される

世界に公開した上でさらに一級品のWebサーバを作るには
これ以外にも多数の課題があり、それだけでビジネスになるレベルです。
Androidアプリでサーバ側の野望を叶えるのは当分控えたほうが良いでしょう。

==[/column]

== 更なる学習のために

本節ではWebサーバを作る上で最小限把握して欲しい内容をまとめました。
Androidアプリから状況を把握する上ではこれで十分でしょう。

本節の内容は入門と言うにも相当単純化しています。

@<href>{https://github.com/TechBooster/AndroidOpenTextbook}
に、本節では説明していない要素も含めた全内容が含まれています。
オープンソースとして自由に参照できますので、

2014年10月現在、
@<href>{https://tcb.mowa-net.jp/griflet/github/TechBooster/AndroidOpenTextbook/}
から上記のPDF版やHTML版を得ることができます。

Webサーバの技術を理解するにはインターネットもしくは「ネットワーク」についての
知識が必要になります。
さらなる詳細については、例えば以下のような書籍を参照してください。

 * マスタリングTCP/IP 入門編 第5版 http://www.amazon.co.jp/dp/4274068765
 * マスタリングTCP/IP 情報セキュリティ編 http://www.amazon.co.jp/dp/4274069214/
 * コンピュータネットワーク 第5版 http://www.amazon.co.jp/dp/482228476X
